---
title: Developer set up | Customs Declarations End-to-End Service Guide
weight: 2
---

<%= partial 'partials/google_tag_manager_js' %>

# Developer set-up

To develop using these APIs you must:

-	be familiar with HTTP, RESTful services, XML and OAuth2
-	be registered as a developer on the [HMRC Developer Hub] (/)
-	add at least one sandbox application on the Developer Hub

Each application you register will be assigned an HMRC ‘ApplicationId’.

You can view all the applications you have registered on the [Developer Hub Applications page](/developer/applications), where you can administer things like API subscriptions and [application credentials](/api-documentation/docs/authorisation/credentials).

Applications can be created in one of two possible environments:

- sandbox environments - where you start development and testing of your software
- production environment - when you are ready to go live, you can request 'production credentials' that will create you a new application (with a new ‘ApplicationId’) in the production environment

The main differences between these two environments are that in the sandbox environments you will [create and use test users](/api-documentation/docs/testing/test-users-test-data-stateful-behaviour) to call the endpoints, and the release versions of CDS APIs in the sandbox will generally be ahead of those in production.
 
[More details about getting started using the sandbox environments.](/api-documentation/docs/testing) 

The purpose of the CDS sandbox (also known as External Test) is to provide an HMRC platform for all external partners (CSPs, SWHs, express operators, and declarants) to complete their required assurance activities, so that they are confident in their readiness for migration to CDS.

The CDS External Test offering has two core services: Trade Test and Trader Dress Rehearsal, which are outlined below.

## The Path to Production

The Path to Production is the software developer and declarant journey from CHIEF to CDS, demonstrating the process and steps from Trade Test to Trader Dress Rehearsal and CDS.

[The Path to Production](/documentation/resources/The_Path_to_Production.pdf)

## Trade Test

A functional test platform where third-party developers can assure their software integration against CDS APIs and a CDS back-end for all core declaration processes and notification types.

- Test trader and account data
- Process all declaration types and procedures
- Integration testing for all APIs
- Exports inventory linking, including dual running arrivals via CHIEF (HMUT)
- Simulated controls, quota, immediate payments services


## Trader Dress Rehearsal

A CDS-like service to support declarants in submitting all types of declarations, to expose all actors in the supply chain to declaration processing in CDS as part of their final assurance activity prior to migration.

- Live trader and account data
- Process all declaration types and procedures
- Integration testing for all APIs
- Simulated controls, quota, immediate payments services

## API subscription model

You must subscribe each application you register to the [CDS APIs](/api-documentation/docs/api) that they intend to use. 
Subscribing allows an application access to all of the endpoints of a particular API-version. An application may subscribe to as many APIs as required, but each 'application => API-version' pairing must have its own subscription enabled.


## API access control

Some of the CDS APIs (and their documentation) are only accessible to applications that have been placed in the allow list for that API. If you cannot subscribe to or access the documentation of a particular API on the developer hub, please check with [SDST](mailto:SDSTeam@hmrc.gov.uk) if your ‘ApplicationId’ needs to be added to the allow list for that API.


## API versioning

When calling a CDS endpoint, you specify the version of the API you wish to use by specifying it in the ‘Accept’ request header of your request (see the specific [API documentation](/documentation/set-up-developers.html#related-api-documentation) for more details on request header values).

In the production environment, there is only one version available of each of the CDS APIs (version 1.0).

In the sandbox environments, however, there may be two versions available of a particular API: one for standard development (known as ‘Trade Test’); and another version (known as ‘Trader Dress Rehearsal’) that more closely mirrors the production environment.

Here is a breakdown of the CDS APIs, with the versions of each that relate to ‘Trade Test’ and ‘Trader Dress Rehearsal’ respectively:

<table>
  <tr><td></td><td></td><td></td><td></td><td></td></tr>
  <tr>
    <td><strong>API Service</strong></td>
    <td><strong>Trade Test</strong></td>
    <td><strong>Trader Dress Rehearsal</strong></td>
  </tr>
  <tr>
    <td>Customs Declarations API</td>
    <td>v 2.0</td>
    <td>v 1.0</td>
  </tr>
  <tr>
    <td>Customs Declarations Information API</td>
    <td>v 1.0</td>
    <td>v 2.0</td>
  </tr>
  <tr>
    <td>Customs Inventory Linking Exports API</td>
    <td>v 1.0</td>
    <td>v 2.0</td>
  </tr>
  <tr>
    <td>Customs Inventory Linking Imports API</td>
    <td>v 1.0</td>
    <td>v 2.0</td>
  </tr>
</table>  
</br>

For your application to be able to call a particular version of an API, you must:

- ensure that your application has access to it (by checking that the version is visible to you on the API’s documentation page)
- [subscribe your application](/documentation/set-up-developers.html#api-subscription-model) to it (in addition to any other subscriptions you may already have for other versions)
- modify your application’s ‘Accept’ request header value, when making a call to the API, to reflect the version you wish to use (see the specific [API documentation](/documentation/set-up-developers.html#related-api-documentation) for more details on request header values)

If a version of an API is not visible on the documentation page then you may need to request your application to be placed in the allow list by [SDST](mailto:SDSTeam@hmrc.gov.uk).

## API rate limiting

Each software house should look to register a single application with HMRC. This application is used by us to identify the software house during the OAuth 2.0 grant flow, and then in subsequent per-user API calls. We limit the number of requests each application can make. This protects our backend service against excessive load and encourages real-time API calls over batch processing.

We set limits based on anticipated loads and peaks. Our standard limit is 3 requests per second per application, as set in the [Reference Guide on HMRC’s Developer Hub](/api-documentation/docs/reference-guide#rate-limiting), although CDS users are pre-approved for 8 requests per second and can obtain this limit by contacting SDST. If you believe your application will sustain a traffic load above this value, then contact us to discuss it further.

If your software reaches the allocated limit then some of your requests will get a HTTP 429 response code. A 429 response should be treated in the same way that your application would handle any other transient HTTP response; by backing off temporarily, before attempting to make the request again.

In most cases, simply following software design best practices will deliver a good customer experience. API requests should not be unnecessarily batched, and rate-limited responses (HTTP 429) should be captured by the application and automatically retried without generating user errors. Retries should not be too quick (consider delaying the next attempt by a few seconds) and should include some randomisation, to minimise the risk of different application instances conflicting. Where an application instance is generating high volumes of API calls, the software design should consider periodically pausing or locally rate-limiting those API calls to minimise the potential for a spike in traffic from one instance impacting another.


## Related API documentation

If you cannot access any of the following API documentation, please email [SDST](mailto:SDSTeam@hmrc.gov.uk) to check if your ‘ApplicationId’ needs to be [added to the allow list](/documentation/set-up-developers.html#api-access-control) for that API:

- [Customs Declarations API](/api-documentation/docs/api/service/customs-declarations) - lets you submit, amend and cancel a customs declaration, and provides the ability to upload supporting documents and make arrival notifications 
- [Customs Declarations Information API](/api-documentation/docs/api/service/customs-declarations-information) - lets you query the status of submitted customs declarations
- [Pull Notifications API](/api-documentation/docs/api/service/api-notification-pull) - lets you “pull” business event notifications CDS has generated from requests submitted via the CDS APIs
- [Customs Inventory Linking Exports API](/api-documentation/docs/api/service/customs-inventory-linking-exports) - lets you link export declarations with specific consignments (Consolidate, Movement & Query)
- [Customs Inventory Linking Imports API (CSP only)](/api-documentation/docs/api/service/customs-inventory-linking-imports) - lets CSPs link import declarations with specific consignments
- [Bulk Data File List (list of tariff codes)](/api-documentation/docs/api/service/secure-data-exchange-bulk-download) - lets you integrate tariff data into your customs software application, providing an initial start-up file, daily files and monthly consolidated files throughout the year.


## Authentication

###Declarants and authorized agents 

The declarant authenticates directly with us using their Government Gateway account, and grants authority to your application for specific scopes. 

Full details and examples can be found on the [HMRC Developer Hub](/api-documentation/docs/authorisation).

For information about authorisation-related errors that your application should handle, see the [Reference Guide](/api-documentation/docs/reference-guide#errors).


###Community System Providers

Community System Providers (CSPs) will register privileged applications with HMRC.

The CSP system will supply data identifying each declarant during each interaction with CDS.


##Error handling best practices

No system guarantees 100% error-free performance, and CDS is no different.

Services calling CDS need to be designed with failure in mind. There are several strategies to mitigate the errors that do occur.

###5XX errors
When CDS returns a HTTP response code in the 5XX range, the recommended response is to retry. Typically, 500 or 503 response codes are the most likely to be received if there is an issue with CDS. The issue may be transient (hence the recommendation to retry).
The one exception in this error range is when response code 501 ('Not Implemented') is returned. This indicates that the endpoint is incorrect. Retrying will not help in this situation. Instead, the URL should be corrected.

After multiple attempts, perhaps with an exponential backoff strategy, the expectation is that this will resolve the vast majority of errors. As an example, 3-5 retries over 1-2 minutes would be a reasonable retry strategy.
Consideration should also be given to using the circuit-breaker pattern.

###4XX errors
If a response code in the 4XX range is received, then the API consumer should examine the response payload for more detail on the error before attempting to retry. This error range usually indicates an error with the request. The request should be modified before attempting a retry.
For example, a 400 response code ('Bad Request') accompanied by a payload response message stating “Payload is not valid according to schema” requires that the request payload is modified so that it validates against the CDS schemas before it is resent.
Similarly, a 406 response code ('Not Acceptable') indicates that the 'Accept' header is missing or invalid. The request should be amended accordingly.


If you are receiving these errors consistently then you should report the problem via the normal routes.

###403 errors
If you receive a response code 403 ('Payload Forbidden') accompanied by a payload response message stating "A firewall rejected the request" then you should stop retrying and report the problem via the normal routes.

There are many recommendations, and plenty of guidance is available on this topic. Some useful resources are listed below:
 
- [The 6 Pillars of the AWS Well-Architected Framework](https://aws.amazon.com/blogs/apn/the-5-pillars-of-the-aws-well-architected-framework/)
- [Amazon whitepaper: Design for Failure](https://docs.aws.amazon.com/whitepapers/latest/running-containerized-microservices/design-for-failure.html)
- [Implement resilient applications](https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/)
